server:
  port: 8090

spring:
  application:
    name: accounts

  cloud:
    consul:
      host: localhost           # Адрес Consul-агента (по умолчанию localhost)
      port: 8500
      config:
        enabled: true            # Включаем Consul Config для внешней конфигурации
        prefix: config           # Префикс в KV-хранилище Consul (по умолчанию "config")
        defaultContext: application  # Контекст по умолчанию
        import-check:
          enabled: false
      discovery:
        ip-address: localhost
        #        instance-id: ${spring.application.name}:${random.value}
        instance-id: ${spring.application.name}
        preferIpAddress: true
        #preferIpAddress: false   # Использовать IP адрес вместо имени хоста
        serviceName: ${spring.application.name} # Имя сервиса
        health-check-url: http://localhost:${server.port}/actuator/health
        health-check-path: /actuator/health
        heartbeat:
          enabled: true       # Отключаем Heartbeat (необязательно)

  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/bankapp
    username: s
    password: sa

    jpa:
      generate-ddl: true
      hibernate:
        ddl-auto: create
        #ddl-auto: none

      properties:
        hibernate:
          dialect: org.hibernate.dialect.PostgreSQLDialect
          format_sql: true

  security:
    oauth2:
      resourceserver:
        jwt:
          # Ниже - адрес сервера авторизации для получения токена
          issuer-uri: http://localhost:8080/realms/master # Для запуска локально
          #issuer-uri: http://keycloak:8080/realms/master # Для запуска в Docker
      client:
        provider:
          keycloak:
            # Ниже - адрес сервера авторизации для получения токена
            issuer-uri: http://localhost:8080/realms/master # Для запуска локально
            #issuer-uri: http://keycloak:8080/realms/master # Для запуска в Docker
        registration:
          accounts: # Описание клиента OAuth2
            provider: keycloak
            authorizationGrantType: client_credentials
            client-id: accounts
            client-secret: WUMwCz8UZ77sdZRCO6ZeWD7MG5f5WYim
            scope: profile
            clientAuthenticationMethod: client_secret_post # Способ передачи секрета

  sql:
    init:
      mode: always

module-notifications: http://localhost:8091/
#module-notifications: http://notifications/